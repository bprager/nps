schema {
  query: Query
  mutation: Mutation
}

scalar DateTime

type SurveysResult {
  totalCount: Int!
  surveys: [Survey]!
}

type UsersResult {
  totalCount: Int!
  users: [User!]!
}

type OrgsResult {
  totalCount: Int!
  orgs: [Org!]!
}

type CategoriesResult {
  totalCount: Int!
  categories: [Category!]!
}

type TagsResult {
  totalCount: Int!
  tags: [Tag!]!
}

type Query {
  survey(id: ID!): Survey!
  allSurveys(limit: Int, offset: Int): SurveysResult!
  user(id: ID!): User!
  users(
    tags: [ID!]
    categories: [ID!]
    org: ID
    limit: Int
    offset: Int
  ): UsersResult!
  allUsers(limit: Int, offset: Int): UsersResult!
  allOrgs(limit: Int, offset: Int): OrgsResult!
  allCategories(limit: Int, offset: Int): CategoriesResult!
  tag(id: ID!): Tag!
  tags(user: ID!): TagsResult!
  allTags(limit: Int, offset: Int): TagsResult!
}

type Mutation {
  addOrg(name: String!): Boolean!
  addCategory(name: String!, parent: ID): Boolean!
  addTag(
    name: String!
    attribute: String
    number: Int
    timestamp: DateTime
  ): Boolean!
  addUser(
    email: String!
    firstName: String
    lastName: String
    nickName: String
  ): Boolean!
  changeUser(
    email: String!
    firstName: String
    lastName: String
    nickName: String
  ): Boolean!
  changeCategory(name: String!, parent: ID): Boolean!
}

type Org {
  id: ID!
  name: String!
}

type Category {
  id: ID!
  name: String!
  parent: Category
}

type Tag {
  id: ID!
  name: String!
  attribute: String
  number: Int
  timestamp: DateTime
}

type User {
  id: ID!
  email: String!
  firstName: String
  lastName: String
  nickName: String
  orgs: [Org!]!
  tags: [Tag!]!
  categories: [Category!]!
}

type Question {
  id: ID!
  open: Boolean!
  body: String!
}

type Note {
  id: ID!
  text: String!
  saved: DateTime!
}

type Survey {
  id: ID!
  start: DateTime
  end: DateTime
  scoreQuestion: Question!
  openQuestion: Question
  note: Note
}
